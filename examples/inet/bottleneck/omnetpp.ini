[General]
network = bottleneck

warnings = true
sim-time-limit = 86.5s
cmdenv-module-messages = true # for normal (non-express) mode only
cmdenv-event-banners = true   # for normal (non-express) mode only

tkenv-plugin-path = ../../../etc/plugins

#
# Network specific settings
#

# set inet_addr, Mask, MTU ( = 1500), default route (=router1)
**.client1.routingFile = "client1.mrt"
**.router1.routingFile = "router1.mrt"
**.server1.routingFile = "server1.mrt"

# ip settings
**.ip.procDelay = 0s
**.IPForward = false

# ARP settings
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s
**.networkLayer.proxyARP = true  # Host's is hardwired "false"

# nam trace
**.namid = -1  # auto

# NIC settings
**.ppp[*].queueType = "DropTailQueue"  # alternatively: REDQueue or DropTailQoSQueue
**.ppp[*].queue.frameCapacity = 100    # packets

# thruput measurement settings
**.startTime = 0s     # start time
**.batchSize = 50     # number of packets in a batch
**.maxInterval = 1s   # max length of measurement interval (measurement ends
                      # if either batchsize or maxinterval is reached, whichever
                      # is reached first)

# tcp apps - client 1
**.client1.numTcpApps = 1
**.client1.tcpAppType = "TCPSessionApp"  # FTP works with TCPVirtualBytesSendQueue/RcvQueue as sendQueue/receiveQueue
**.client1.tcpApp[*].sendBytes = 100MB
**.client1.tcpApp[*].active = true
**.client1.tcpApp[*].address = "172.0.0.1"
**.client1.tcpApp[*].port = 10020
**.client1.tcpApp[*].connectAddress = "172.0.1.111" # 172.0.1.111 = server1
**.client1.tcpApp[*].connectPort = 10021
**.client1.tcpApp[*].tOpen = 0s
**.client1.tcpApp[*].tSend = 0s
**.client1.tcpApp[*].tClose = 0s
**.client1.tcpApp[*].sendScript = ""

# tcp apps - server 1
**.server1.numTcpApps = 1
**.server1.tcpAppType = "TCPSinkApp"
**.server1.tcpApp[*].address = "172.0.1.111"
**.server1.tcpApp[*].port = 10021

# tcp settings
**.tcp.advertisedWindow = 65535                       # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = true                      # enables delayed ACKs
**.tcp.nagleEnabled = true                            # enables Nagle's algorithm
**.tcp.mss = 1452                                     # maximum segment size (header option)
**.tcp.sackSupport = true                             # enables selective acknowledgment (header option)
**.tcp.tcpAlgorithmClass = "TCPReno"                  # TCPTahoe/TCPReno/TCPNoCongestionControl/DumbTCP
**.tcp.sendQueueClass = "TCPVirtualDataSendQueue"     # TCPVirtualDataSendQueue/TCPMsgBasedSendQueue
**.tcp.rexmitQueueClass = "TCPVirtualDataRexmitQueue" # TCPVirtualDataRexmitQueue
**.tcp.receiveQueueClass = "TCPVirtualDataRcvQueue"   # TCPVirtualDataRcvQueue/TCPMsgBasedRcvQueue
**.tcp.recordStats = true                             # enables recording seqNum etc. into output vectors

#
# Config specific settings
#

[Config ZeroA]
description = "RouterQueueCap=50, SACK Off"           # first drop seen with frameCapacity = 43
**.ppp[*].queue.frameCapacity = 50 # packets
**.tcp.sackSupport = false

[Config ZeroB]
description = "RouterQueueCap=50, SACK On"            # first drop seen with frameCapacity = 43
**.ppp[*].queue.frameCapacity = 50 # packets
**.tcp.sackSupport = true

[Config OneA]
description = "RouterQueueCap=40, DROPS, SACK Off"    # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 40 # packets
**.tcp.sackSupport = false

[Config OneB]
description = "RouterQueueCap=40, DROPS, SACK On"     # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 40 # packets
**.tcp.sackSupport = true

[Config TwoA]
description = "RouterQueueCap=30, DROPS, SACK Off"    # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 30 # packets
**.tcp.sackSupport = false

[Config TwoB]
description = "RouterQueueCap=30, DROPS, SACK On"     # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 30 # packets
**.tcp.sackSupport = true

[Config ThreeA]
description = "RouterQueueCap=20, DROPS, SACK Off"    # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 20 # packets
**.tcp.sackSupport = false

[Config ThreeB]
description = "RouterQueueCap=20, DROPS, SACK On"     # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 20 # packets
**.tcp.sackSupport = true

[Config FourA]
description = "RouterQueueCap=10, DROPS, SACK Off"    # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 10 # packets
**.tcp.sackSupport = false

[Config FourB]
description = "RouterQueueCap=10, DROPS, SACK On"     # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 10 # packets
**.tcp.sackSupport = true

[Config FiveA]
description = "RouterQueueCap=5, DROPS, SACK Off"     # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 5 # packets
**.tcp.sackSupport = false

[Config FiveB]
description = "RouterQueueCap=5, DROPS, SACK On"      # first drop seen with frameCapacity = 43
**.router1.ppp[*].queue.frameCapacity = 5 # packets
**.tcp.sackSupport = true


